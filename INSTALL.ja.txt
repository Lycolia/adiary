################################################################################
adiary 簡易ドキュメント                             Copyright (C)2013 nabe@abk
################################################################################
			公式サイト http://adiary.org/
################################################################################
●動作環境
################################################################################

・Apache またはそれと互換性のあるWebサーバ
・Perl 5.8.1以降（pure-Perl可）

※Image::Magick、Net::POP3、Net::SSLeayライブラリ、sendmailコマンドがあれば全機能が使えます。

【重要】
　Apache以外のサーバ、または .htaccess が無効になっているサーバで動作させる場合、
data/ および __cache/ ディレクトリをwebサーバから参照できない場所に移動するか、
他の方法でそれらのディレクトリにweb上からアクセスできないようにしてください。

　Windows環境でもApacheならば容易に動くと思いますがサポートはしません。
（Windows環境での不具合報告は気が向いたら対応します）

################################################################################
--------------------------------------------------------------------------------
●設置方法
--------------------------------------------------------------------------------
(1) 解凍してでてきたファイルをサーバ上の任意の位置に置く
(2) adiary.cgi に実行属性を付ける
(3) __cache/ data/, pub/ を www 権限で書き込めるようにする。（suEXEC の場合は不要）
(4) adiary.conf.cgi.sample を adiary.conf.cgi としてコピーし適当にいじる
(5) adiary.cgi にアクセスし、ID、パスワードを適当に入力してログイン。
(6) その後、自分自身をユーザーとして追加する。

※標準で特定のブログを表示させたい場合はシステム管理から設定してください。

--------------------------------------------------------------------------------
●データベース運用のヒント（PostgreSQL編）
--------------------------------------------------------------------------------
(1)PostgreSQL をインストールする。DBI, DBD::Pg もインストール。
(2)データベースを初期化（実行ユーザーがデータベースのsuper user。root不可）
   最近のディストリビューションはデーモンを起動すれば勝手に作成してくれます。
   標準の文字コードを指定する場合は次のようにする。
	pgsql~$ initdb /data/directory
	pgsql~$ initdb /data/directory --locale=ja_JP.UTF8
   super user = pgsql として以下進めます。
(3)PostgreSQLデーモンを起動する。
(4)データベースを作成する。
   文字コードを指定する場合は次のようにする。スーパーユーザー名と同一にする。
	pgsql~$ createdb pgsql
(5)コンソールに入る（このとき存在するデータベースが必要）
	pgsql~$ psql [database name] [user name]
	省略時は共に実行したユーザーIDになる。
(6)コンソール上で、pgsql ユーザーにパスワードを設定する。
	pgsql=# ALTER USER pgsql ENCRYPTED PASSWORD 'password';
(7)一度コンソールを脱出し、データベースディレクトリの pg_hba.conf を編集する。
	変更前）local   all    all           trust
	変更後）local   all    all           md5
	truct などとなっている部分はすべて md5 に変更する。
	（そうしないとパスワード未承認でつながってしまう）
(8)変更したら、PostgreSQL デーモンを再起動する。
(9)再びコンソールに入る
	pgsql~$ psql pgsql pgsql
(10)今回のシステム用のユーザーとデータベースを作成する。
	pgsql=# CREATE USER adiary ENCRYPTED PASSWORD 'password';
	pgsql=# CREATE DATABASE adiary OWNER=adiary ENCODING 'UTF8';

■コマンドのメモ）
・データベース一覧（文字コード付）
	pgsql~$ psql -l

--------------------------------------------------------------------------------
●データベース運用のヒント（MySQL編）
--------------------------------------------------------------------------------
(1)MySQL をインストールする。DBI, DBD::mysql もインストール。
　Fedora Core ならば
	console~$ yum -y install mysql-server perl-DBD-MySQL
(2)データベースを初期化。
   最近のディストリビューションはデーモンを起動すれば勝手に作成してくれます。
(3)MySQL デーモンを起動する。
	console~$ /etc/init.d/mysqld start
(4)MySQL に接続する。
	console~$ mysql -u root
	console~$ mysql -u root -p	←パスワード指定あり
(5)MySQLコンソールで rootパスワード を設定する
	mysql> use mysql;
	mysql> select host,user,password from user;			←確認
	mysql> SET PASSWORD FOR root@localhost=PASSWORD('password');
	mysql> SET PASSWORD FOR root@your.host=PASSWORD('password');
	mysql> DELETE FROM user WHERE password='';
(6)adiary用のデータベース作成
	mysql> CREATE DATABASE adiary DEFAULT CHARSET=utf8;
(7)adiary用のデータベースユーザーを作成
	mysql> GRANT all privileges ON adiary.* TO adiary@localhost IDENTIFIED BY 'password';

	※権限を制限したいときは下記でも動くと思いますが、テストはしていません。
	mysql >GRANT create,delete,drop,index,insert,select,update,alter ON adiary.* TO adiary@localhost IDENTIFIED BY 'password';

■コマンドのメモ）
	mysql> show tables;
	mysql> show databases;
	mysql> show variables like 'char%';
	mysql> show create table table_name;

■困ったときのマニュアル
http://dev.mysql.com/doc/refman/4.1/ja/index.html
日本語環境の設定
http://www.mysql.gr.jp/frame/modules/bwiki/?FAQ#content_1_38

################################################################################
■キャッシュ環境での運用
################################################################################
　adiaryは、SpeedyCGI、FastCGI、mod_perl2等のキャッシュ環境に対応しています。

●mod_perlの設定

　ライブラリリロードを自作したため、設定が簡略になりました。

設定例。worker/prefork 両対応です
---------------------------------------------------
<IfModule mod_perl.c>
PerlSwitches -I/home/nabe/public_html/adiary/lib
PerlOptions  +ParseHeaders

<Directory "/home/nabe/public_html/adiary/">
        <Files ~ "\.mod\.cgi$">
                SetHandler perl-script
        </Files>
        PerlResponseHandler ModPerl::Registry
</Directory>
</IfModule>
---------------------------------------------------

※名前空間が衝突するため adiary Ver2以前 と adiary Ver3を
　同一の mod_perl で動作させることはできません。

################################################################################
■環境変数の設定
################################################################################

.htaccess 等を使い環境変数を設定することで adiary の動作を変更できます。

・SetENV Satsuki_timer 1

　時間計測を常にonにします。通常、キャッシュ環境では自動的にonになりますが、
CGI動作時はタイマーモジュールのロード時間削減のため計測をしません。
　この環境変数を設定すると強制的に時間計測がonになります。

・SetENV Satsuki_cache_dir <cache-dir>

　キャッシュディレクトリ（標準 __chace/）を変更します。
　confファイル等ではなく必ず環境変数で設定する必要があります。
（conf解析時にはすでにキャッシュを生成しているため）

・SetENV Satsuki_lib_nocheck 1

　キャッシュ環境でのライブラリのチェックを省略します。
　毎回のライブラリチェックがなくなることで無駄な処理が減りますが、アップデート
時にmod_perlならApacheの再起動、SpeedyCGIやFastCGIならプロセスの強制削除等が
必要になります。

################################################################################
■特殊な動作設定
################################################################################


