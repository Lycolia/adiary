use strict;
#------------------------------------------------------------------------------
# データエクスポート for JUGEM
#                                                   (C)2006 nabe / nabe@abk.nu
#------------------------------------------------------------------------------
package SatsukiApp::adiary::ExportJUGEM;
use Time::Local;
###############################################################################
# ■基本処理
###############################################################################
#------------------------------------------------------------------------------
# ●【コンストラクタ】
#------------------------------------------------------------------------------
sub new {
	my $self = bless({}, shift);
	$self->{ROBJ} = shift;

	return $self;
}

###############################################################################
# ■データインポータ
###############################################################################
#------------------------------------------------------------------------------
# ●JUGEM形式のデータエクスポート
#------------------------------------------------------------------------------
sub export {
	my ($self, $skeleton, $logs, $option) = @_;
	my $ROBJ = $self->{ROBJ};

	# 文字コード変換
	my $system_coding = $ROBJ->{System_coding};
	my $output_coding = 'UTF-8';
	my $jcode = $system_coding ne $output_coding ? $ROBJ->load_codepm() : undef;

	# ヘッダ出力
	{
		my $header = $ROBJ->chain_array( $option->{header} );
		if ($jcode) {
			$jcode->from_to(\$header, $system_coding, $output_coding);
		}
		print $header;
	}

	# 引数設定
	my $aobj      = $option->{aobj};
	my $sb_mode   = $option->{sb_mode};	# Serene Bach 拡張形式フラグ
	my $force_ymd = $option->{force_ymd};
	#---------------------------------------------------------------------
	# ログの解析と保存
	#---------------------------------------------------------------------
	foreach (@$logs) {
		#-------------------------------------------------------------
		# データ加工
		#-------------------------------------------------------------
		if ($_->{enable}) { $_->{status}='Publish'; } else { $_->{status}='Draft'; }	# for sb

		# 日付加工
		my $yyyymmdd = $_->{yyyymmdd};
		my $year = substr($yyyymmdd, 0, 4);
		my $mon  = substr($yyyymmdd, 4, 2);
		my $day  = substr($yyyymmdd, 6, 2);
		my $ymd_utc;
		eval { $ymd_utc = Time::Local::timegm(0, 0, 0, $day,$mon-1,$year); };
		my $tm = $_->{tm};		# ↓過去の記事を指定してたら
		if ($ymd_utc && ($force_ymd || $tm-$ymd_utc>86400)) {
			# 00:00:00 を取り込めないシステムがあるので, pkey を足す
			$tm = $ymd_utc + int($_->{pkey});
		}
		$_->{tm} = $tm;

		#-------------------------------------------------------------
		# 本文加工
		#-------------------------------------------------------------
		$aobj->text_split_for_mt( $_ );
		# $_->{text} と $_->{parser} から
		# $_->{convert_breaks}, $_->{body}, $_->{ex_body}
		# を適切に設定してくれる

		# 行末改行を置換
		if (! $sb_mode && $_->{convert_breaks}) {
			$_->{body}    =~ s|\n|<br />\n|g;
			$_->{ex_body} =~ s|\n|<br />\n|g;
		}

		#-------------------------------------------------------------
		# スケルトンの実行
		#-------------------------------------------------------------
		my $day = $ROBJ->exec( $skeleton, $_ );

		#-------------------------------------------------------------
		# 出力
		#-------------------------------------------------------------
		my $str = $ROBJ->chain_array( $day );
		if ($jcode) {
			$jcode->from_to(\$str, $system_coding, $output_coding);
		}
		print $str;
	}
	return 0;
}

###############################################################################
# ■スケルトン向けサブルーチン
###############################################################################
#------------------------------------------------------------------------------
# ●<![CDATA[?]]>用にデータをエスケープする
#------------------------------------------------------------------------------
sub cdata_escape {
	my $self = shift;
	foreach(@_) {
		$_ =~ s/\]\]>/]]&gt;/g;
	}
	return $_[0];
}


#------------------------------------------------------------------------------
# ●<br> を \n に変更する
#------------------------------------------------------------------------------
sub br2lf {
	my $self = shift;
	foreach(@_) {
		$_ =~ s/\n//g;
		$_ =~ s/<br>/\n/g;
	}
	return $_[0];
}

#------------------------------------------------------------------------------
# ●タイムゾーン文字列 +09:00 等を生成する
#------------------------------------------------------------------------------
sub tz2string {
	my ($self, $tz) = @_;
	$tz = int($tz*60);
	my $hour = int($tz/60);
	my $min  = $tz - $hour*60;
	if ($tz < 0) { return sprintf("%02d:%02d", $hour, $min); }
	return sprintf("+%02d:%02d", $hour, $min);;
}



1;
