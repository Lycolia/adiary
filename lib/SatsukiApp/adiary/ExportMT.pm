use strict;
#------------------------------------------------------------------------------
# データエクスポート for Movable Type
#                                                   (C)2013 nabe / nabe@abk
#------------------------------------------------------------------------------
package SatsukiApp::adiary::ExportMT;
use Time::Local;
###############################################################################
# ■基本処理
###############################################################################
#------------------------------------------------------------------------------
# ●【コンストラクタ】
#------------------------------------------------------------------------------
sub new {
	my $self = bless({}, shift);
	$self->{ROBJ} = shift;

	return $self;
}

###############################################################################
# ■データインポータ
###############################################################################
#------------------------------------------------------------------------------
# ●Movable Type形式のデータエクスポート
#------------------------------------------------------------------------------
sub export {
	my ($self, $skeleton, $logs, $option) = @_;
	my $ROBJ = $self->{ROBJ};

	# 文字コード変換
	my $system_coding = $ROBJ->{System_coding};
	my $output_coding = $option->{charset};
	my $jcode = $system_coding ne $output_coding ? $ROBJ->load_codepm() : undef;

	my $aobj = $option->{aobj};
	my $force_ymd  = $option->{force_ymd};
	#---------------------------------------------------------------------
	# ログの解析と保存
	#---------------------------------------------------------------------
	foreach (@$logs) {
		#-------------------------------------------------------------
		# データ加工
		#-------------------------------------------------------------
		if ($_->{enable}) { $_->{status}='Publish'; } else { $_->{status}='Draft'; }

		# 日付加工
		my $yyyymmdd = $_->{yyyymmdd};
		my $year = substr($yyyymmdd, 0, 4);
		my $mon  = substr($yyyymmdd, 4, 2);
		my $day  = substr($yyyymmdd, 6, 2);
		my $ymd_utc;
		eval { $ymd_utc = Time::Local::timegm(0, 0, 0, $day,$mon-1,$year); };
		my $tm = $_->{tm};		# ↓過去の記事を指定してたら
		if ($ymd_utc && ($force_ymd || $tm-$ymd_utc>86400)) {
			# 00:00:00 を取り込めないシステムがあるので, pkey を足す
			$tm = $ymd_utc + int($_->{pkey});
		}
		$_->{tm} = $tm;

		#-------------------------------------------------------------
		# 本文加工
		#-------------------------------------------------------------
		$aobj->text_split_for_mt( $_ );
		# $_->{text} と $_->{parser} から
		# $_->{convert_breaks}, $_->{body}, $_->{ex_body}
		# を適切に設定してくれる

		# 行頭ハイフンを escape
		$_->{body}    =~ s/\n-----/\n&#45;----/g;
		$_->{ex_body} =~ s/\n-----/\n&#45;----/g;

		#-------------------------------------------------------------
		# スケルトンの実行
		#-------------------------------------------------------------
		my $day = $ROBJ->exec( $skeleton, $_ );

		#-------------------------------------------------------------
		# 出力
		#-------------------------------------------------------------
		if ($jcode) {
			$jcode->from_to(\$day, $system_coding, $output_coding);
		}
		print $day;
	}
	return 0;
}

###############################################################################
# ■スケルトン向けサブルーチン
###############################################################################
#------------------------------------------------------------------------------
# ●<br> を \n に変更する
#------------------------------------------------------------------------------
sub br2lf {
	my $self = shift;
	foreach(@_) {
		$_ =~ s/\n//g;
		$_ =~ s/<br>/\n/g;
	}
	return $_[0];
}



1;
