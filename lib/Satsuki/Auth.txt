package Satsuki::Auth;
===============================================================================
ユーザー認証ルーチン 説明書	Version 2.00	2010/01/13
===============================================================================
				Copyright(C)2005-2010 nabe / ABK project.
[TAB=8]

###############################################################################
# ■メンバ変数
###############################################################################
================================================================================
●動作設定（表示はデフォルト値）
================================================================================
$self->{table} = "_users";		テーブル名。他と被らないよう注意。
$self->{uid_max_length}  = 16;		IDの最大長
$self->{name_max_length} = 30;		ユーザ名の最大長
$self->{uid_lower_rule}  = 1;		ユーザーIDを [a-z][a-z0-9]* に制限する
$self->{uid_underscore}  = 1;		ユーザーIDに _ を許可する
$self->{uid_notag}       = 1;		ユーザーIDに " ' < > & を含ませない
$self->{name_notag}      = 1;		ユーザー名に " ' < > & を含ませない

$self->{disallow_num_pass}=1;		数字のみのパスワードを拒否する
$self->{pass_min}        = 4;		パスワードの最低文字数（デフォルト4文字）
$self->{expires}	 = 180*86400;	ログインの有効期限（秒）

$self->{sessions}    = 1;	１ユーザーあたりの最大ログインセッション数
$self->{all_logout}  = 0;	ログアウト時にすべてのセッションを削除
$self->{start_up}    = 0;	管理者未登録時に root* 無条件認証する

$self->{fail_sleep}  = 0;	ログイン失敗時にsleep（秒）。0:無効。±0.2される
$self->{fail_count}  = 15;	指定回数失敗したら、しばらくログインできなくする
$self->{fail_minute} = 10;	しばらくログインできなくなる時間（分）

$self->{logtext_max} = 128;	ログ１要素あたりの最大文字数

================================================================================
●カラム拡張
================================================================================
$self->{extcol} = [];		拡張するカラムのハッシュ配列

（例）
<$Auth.extcol = array( \
	{name=>email, type=>text, index=>1, unique=>1, _notag=>1, _nocrlf=>1, _secure=>1} \
)>
各カラムの情報は、DBのcreate_table参照のこと。
	_notag=>1 	「" ' < >」の除去を行う。
	_nocrlf=>1	改行除去が行う。
	_secure=>1	ユーザ本人がパスワードを変更する場合にパスワードが必要。
	_secure=>-1	ユーザ本人のパスワード変更を許可しない。
	文字列カラムに\x00（null文字）は記録できない。

追加したカラムはログイン時、$self->{ext}->{$name} に値がロードされる。
既存カラムと名前がかぶらないように注意すること。


$self->{uid_alt_col};		ログイン時の代替カラム

拡張カラムなどをIDの代わりに使用してログインできるようにする。
例えば、emailカラムを拡張し、そのカラムをID代わりにしてログインさせる。
全体の処理は ID ベースであるので、
ログイン後は得られたIDを記録して使用すること。

================================================================================
●内部変数（外部から参照利用可）
================================================================================
Auth.ok			承認時のみ 1 を定義
Auth.pkey		ユーザーpkey
Auth.id			ユーザーID（承認時のみ定義）
Auth.name		ユーザー名
Auth.isadmin		管理権限ユーザーのみ 1 を定義
Auth.isroot		強権限管理者（Auth.pmではrootを区別しない）
Auth.auto		無条件承認の場合のみ 1 を定義
Auth.ext.(colname)	ユーザのカラム拡張の値と loign_*, fail_*
Auth.exists_admin	管理者が（１人でも）存在するとき 1 を定義

================================================================================
●セキュリティ拡張仕様
================================================================================
$self->{root_id} = '';
　rootになる（Auth.isroot=1）idを指定する。
　isadmin でなければ isroot にはなれない。（isrootなら必ずisadminである）
（auth.pmではroot権限は特に確認しない）

$self->{admin_list} = flagq(id1 id2 ...);
　adminになれるidを直接指定する。使用しないときは未定義にすること。
　ユーザー情報に isadmin が許可されていても、
　このリストに入っていなければ isadmin フラグは立たない。

$self->{admin_allow_ip} = arrayq(192.168.1. 127.0.0.1);
　REMOTE_ADDR と比較し、先頭部分マッチすれば許可する。
　192.168.1. は 192.168.1.1 にマッチするが、192.168.10.1 にマッチしない。
　192.168.1  は 192.168.1.1 にも 192.168.10.1 にもマッチするが、10.192.168.1 にはマッチしない。

###############################################################################
# ■データベース情報
###############################################################################
●$table
　ユーザー情報テーブル。
pkey		serial	主キー
id		text	(unique/not null) ID
name		text	(not null) ユーザー名
pass		text	Cryptedされた文字列
login_c		int	loginした回数
login_tm	int	最後にloginした日時(UTC)
fail_c		int	login失敗した回数（成功時にクリア）
fail_tm		int	最後にloginに失敗した時間
disable		flag	アカウントが無効
isadmin		flag	管理者

●${table}_sid
　セッション情報テーブル。

pkey		serial	主キー
id		text	(not null) ID
sid		text	(not null) セッション ID
login_tm	int	このセッションloginした日時/SID生成日時(UTC)

●${table}_log
　ログ情報テーブル。

pkey		serial	主キー
id		text	(not null) ID
tm		int	(not null) logの記録時刻(UTC)
type		text	ログタイプ
msg		text	補助メッセージ
ip		text	IPアドレス
host		text	HOST名
agent		text	HTTP_USER_AGENT

###############################################################################
# ■ログの外部保存
###############################################################################
Auth.log_stop
	1 を設定すると log テーブルに保存しなくなります。
	log_func と通常のログ保存は独立です。
	両方保存することも可能です。

Auth.log_func
	ログを保存する関数リファレンスを指定します。
	呼び出しと引数は次のとおりです。

&log_func($id, $type, $msg);


###############################################################################
# ■init
###############################################################################
================================================================================
●初期化
================================================================================
$ROBJ->loadpm("auth", $DB);
	$DB		Satsuki-system の標準DBモジュールオブジェクト

###############################################################################
# ■セッション管理
###############################################################################
================================================================================
●ログイン
================================================================================
$r = $self->login($id, $pass);

	$id			ログインID
	$pass			パスワード

Ret:
	undef		失敗
	文字列		成功（文字列は Session ID）

Set:	成功時のみ
	$self->{ok}		1
	$self->{id}		ID
	$self->{name}		名前
	$self->{isadmin}	0:一般ユーザ 1:管理者(super user)
	$self->{info}		付加情報

================================================================================
●セッション承認
================================================================================
$r = $self->session_auth($id, $session_id, $opt);

	$id			ID
	$session_id		セッションID
	$opt->{force_auth}	パスワードを確認せずに承認する
				※直接指定せず、force_auth() を利用すること
Ret:
	undef			失敗
	0以外			成功（1:通常成功, 2:ユーザー未登録自動承認）

Set:	成功時のみ。login() に同じ。


================================================================================
●強制セッション承認処理
================================================================================
$r = $self->force_auth($id)

	$id		ログインID

Ret:	session_auth() に同じ。IDが不正だと失敗する。
Set:	session_auth() に同じ

================================================================================
●ログアウト
================================================================================
$self->logout();
	セッション承認済の状態で呼び出すこと。

Set:	成功時のみ、次の値を未定義にする。
	$self->{ok}, $self->{id}, $self->{name}, $self->{isadmin}, $self->{info}

###############################################################################
■ユーザー管理
###############################################################################
================================================================================
●ユーザー情報の取得
================================================================================
$h = $self->get_uid('id');
$h = $self->get_uid('id', $col);

　誰でも実行可能。

Ret:
	undef	ユーザーが見つからない。
	(id)	ユーザーが見つかった。

================================================================================
●ユーザー情報の取得
================================================================================
・一般ユーザ
$h = $self->get_userinfo();
・管理者
$h = $self->get_userinfo('id', $col);

　ユーザー情報テーブルのデータが入ります。
　IDや検索カラム指定は管理者のみ可能。一般ユーザーが指定しても無視されます。

	id, name, isadmin, info ほか全部。
	pass は返りません。

Ret:	undef	エラー
	$h	ユーザーデータ

================================================================================
●ユーザーリストの生成
================================================================================
$ha = $self->load_userlist($sort_col);

　管理者のみ実行可能。
　ユーザー情報テーブルの次に示したカラムデータが入ります。

	id name info login_count login_tm fail_count fail_tm disable isadmin

Ret:
	スケルトンを全ユーザーについて評価した結果が返る
================================================================================
●ユーザーの追加、編集
================================================================================
$r = $self->user_add(\%form);
$r = $self->user_edit(\%form);

　管理者のみ実行可能。編集時は ID を必ず指定すること。

	form.id		ID
	form.pass	パスワード
	form.pass2	パスワード（確認用）。未定義ならばチェックしない
	form.name	ユーザー名
	form.isadmin	管理者のとき 1 を定義
	form.(ext)	ユーザー拡張カラムの情報（ext.(col) ではない）

	form.disable		ユーザーをログイン不可にする
	form.disable_pass	1を設定するとパスワードを初期化（ログイン不可）にする
	form.crypted_pass	crypt済のパスワード文字列

	汚染されたフォームのデータを直接渡して呼び出してよい。
	ID に使用出来る文字列は [A-Za-z0-9_] のみ。
	ユーザー名は必須。追加時はパスワードは必須。

	編集時はパスワードを省略した場合、パスワードは変更しない。

Ret:
	0		成功（Redirect推奨）
	1		エラー

================================================================================
●ユーザーの削除
================================================================================
$r = $self->user_delete(\@delete_ary);

　管理者のみ実行可能。

	@delete_ary	削除するユーザーIDの配列
			汚れたフォームデータをそのまま渡してよい。

Ret:
	0		成功（Redirect推奨）
	1		エラー

================================================================================
●ユーザー情報の変更（ユーザー本人）
================================================================================
$r = $self->change_user_info(\%form);

	form.now_pass	現在のパスワード
	form.pass	新しいパスワード
	form.pass2	新しいパスワード（確認用／未定義ならばチェックしない）

　名前などは now_pass を指定しなくても変更可能。
　拡張カラムも設定できる。
　変更は、現在ログイン中のIDに対して行われている。

　汚染されたデータをそのまま渡しても構わない。

Ret:
	0		成功（Redirect推奨）
	1		エラー

###############################################################################
■機能拡張 / 雑多機能
###############################################################################
================================================================================
●ユーザーIDの生成
===============================================================================
$id = $self->generate_uid($string);

　$string に渡された文字列を元に、ユニークな $id を生成する。

Ret:
	(uid)		ユーザーID
	undef		失敗

================================================================================
●パスワードの確認
===============================================================================
$r = $self->check_pass_by_id($id, $pass);

　$string に渡された文字列を元に、ユニークな $id を生成する。

Ret:
	undef/0		失敗
	1		成功（Authorize）

================================================================================
●sudo
===============================================================================
$r = $self->sudo('method', arg...);

　管理権限が必要な機能を呼び出す。

