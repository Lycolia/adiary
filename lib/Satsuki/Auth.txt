package Satsuki::Auth;
===============================================================================
ユーザー認証ルーチン 説明書	Version 2.40
						Copyright(C)2005-2022 nabe@abk
===============================================================================
[TAB=8]

###############################################################################
# ■メンバ変数
###############################################################################
================================================================================
●動作設定（表示はデフォルト値）
================================================================================
$self->{table} = "_users";		テーブル名。他と被らないよう注意。
$self->{uid_max_length}  = 16;		IDの最大長
$self->{name_max_length} = 30;		ユーザ名の最大長
$self->{uid_lower_rule}  = 1;		ユーザーIDを [a-z][a-z0-9]* に制限する
$self->{uid_underscore}  = 1;		ユーザーIDに _ を許可する
$self->{uid_notag}       = 1;		ユーザーIDに " ' < > & を含ませない
$self->{name_notag}      = 1;		ユーザー名に " ' < > & を含ませない

$self->{disallow_num_pass}=1;		数字のみのパスワードを拒否する
$self->{pass_min}        = 4;		パスワードの最低文字数（デフォルト4文字）
$self->{expires}	 = 180*86400;	ログインの有効期限（秒）

$self->{max_sessions} = 1;	１ユーザーあたりの最大ログインセッション数
$self->{all_logout}   = 0;	ログアウト時にすべてのセッションを削除
$self->{start_up}     = 0;	管理者未登録時に root* 無条件認証を行う

$self->{fail_sleep}   = 0;	ログイン失敗時にsleep（秒）。0:無効。±0.2される
$self->{fail_count}   = 15;	指定回数失敗したら、しばらくログインできなくする
$self->{fail_minute}  = 10;	しばらくログインできなくなる時間（分）

$self->{logtext_max}  = 128;	ログ１要素あたりの最大文字数

$self->{uid_alt_col}		ログイン時の代替カラム

	拡張カラムや email などをIDの代わりに使用してログインできるようにする。
	この設定を行っても、IDでのログインは引き続き可能。
	ログイン以外の処理は ID ベースとなるので、
	ログイン後は得られた ID（$self->{id}）を記録して使用する。

================================================================================
●内部変数（外部から参照利用可）
================================================================================
Auth.ok			認証時のみ 1
Auth.pkey		ユーザーpkey
Auth.id			ユーザーID（認証時のみ定義）
Auth.name		ユーザー名
Auth.email		メールアドレス（内部では使用せず）
Auth.isadmin		管理権限ユーザーのみ 1
Auth.isroot		強権限管理者（Auth.pmではrootを区別しない）
Auth.auto		スタートアップ認証の場合のみ 1
Auth.exists_admin	Auth.start_upが無効か、有効な管理者が存在するとき 1
Auth.disabled_admin	管理者権限が admin_* のセキュリティで無効化されたとき 1

Auth.ext.*		ユーザーテーブル内の下記カラム以外のすべて
			pass pkey id name email disable isadmin

Auth.DB			内部で使用しているDBモジュール。

================================================================================
●セキュリティ拡張仕様
================================================================================
$self->{allow_ip}   = arrayq(192.168.1. 127.0.0.1);
$self->{allow_host} = arrayq(example.jp);

・ログインできるIP/HOSTの条件を配列で設定します。未設定時はすべて許可です。
・IP/HOSTはどちらか一方の条件をクリアすればokです。
・ipは前方一致、hostは後方一致で確認します。

（例）
・192.168 や 192.168. は 192.168.0.1 にマッチ。
・172.16  や 172.16.  は 172.160.0.1 や 10.0.172.16 にマッチしない。
・ example.jp は example.jp や test.example.jp にマッチ。
・ example.jp は test-example.jp にはマッチしない。
・.example.jp は example.jp にはマッチしない。
・.example.jp は test.example.jp にマッチ。

$self->{admin_list} = flagq(id1 id2 ...);
$self->{admin_allow_ip}   = arrayq(192.168.1. 127.0.0.1);
$self->{admin_allow_host} = arrayq(example.jp);
$self->{admin_secret} = 'secret phrase';

　adminになれるidやIP/HOST（上と同じ仕様）、もしくは認証句を設定します。
　いずれかの条件をクリアしなければ isadmin フラグは立ちません（ログインはできる）。

$self->{root_list} = flagq(root admin);

　isadminが有効であるとき、rootになる（Auth.isroot=1）idを指定します。
　auth.pmではroot権限は特に使用しません。

###############################################################################
# ■データベース情報
###############################################################################
●$table
　ユーザー情報テーブル。
pkey		serial	主キー
id		text	(unique/not null) ID
name		text	(not null) ユーザー名
email		text	メールアドレス
pass		text	Cryptedされた文字列
login_c		int	loginした回数
login_tm	int	最後にloginした日時(UTC)
fail_c		int	login失敗した回数（成功時にクリア）
fail_tm		int	最後にloginに失敗した時間
disable		flag	アカウントが無効
isadmin		flag	管理者

●${table}_sid
　セッション情報テーブル。

pkey		serial	主キー
id		text	(not null) ID
sid		text	(not null) セッション ID
login_tm	int	このセッションloginした日時/SID生成日時(UTC)

●${table}_log
　ログ情報テーブル。

pkey		serial	主キー
id		text	(not null) ID
tm		int	(not null) logの記録時刻(UTC)
type		text	ログタイプ
msg		text	補助メッセージ
ip		text	IPアドレス
host		text	HOST名
agent		text	HTTP_USER_AGENT

###############################################################################
# ■ログの外部保存
###############################################################################
Auth.log_stop
	1 を設定すると log テーブルに保存しなくなります。
	log_func と通常のログ保存は独立です。
	両方保存することも可能です。

Auth.log_func
	ログを保存する関数リファレンスを指定します。
	呼び出しと引数は次のとおりです。

&log_func($id, $type, $msg);


###############################################################################
# ■init
###############################################################################
================================================================================
●初期化
================================================================================
$ROBJ->loadpm("auth", $DB);
	$DB		Satsuki-system の標準DBモジュールオブジェクト

###############################################################################
# ■セッション管理
###############################################################################
================================================================================
●ログイン
================================================================================
$r = $self->login($id, $pass, $admin_secret);

	$id			ログインID
	$pass			パスワード
	$admin_secret		管理者認証フレーズ

Ret:
	{
		ret => num,	0:成功, 0以外:失敗
		sid => '',	session id（成功時のみ）
		msg => ''	失敗理由（失敗時のみ）
	}

================================================================================
●セッション認証
================================================================================
$r = $self->session_auth($id, $session_id, $admin_secret);

	$id			ID
	$session_id		セッションID
	$admin_secret		管理者認証フレーズ

Ret:
	undef			失敗
	0以外			成功（1:通常成功, 2:ユーザー未登録自動認証）

Set:	成功時のみ。login() に同じ。

================================================================================
●ログアウト
================================================================================
$self->logout();
	セッション認証済の状態で呼び出すこと。

Set:	成功時のみ、次の値を未定義にする。
	$self->{ok}, $self->{id}, $self->{name}, $self->{isadmin}, $self->{info}

###############################################################################
■ユーザー管理
###############################################################################
================================================================================
●ユーザー情報の取得
================================================================================
・一般ユーザ
$h = $self->get_userinfo();
・管理者
$h = $self->get_userinfo('search id');
$h = $self->get_userinfo('search val', $col);

	$col	検索対象カラム

　ユーザー情報テーブルのデータが入ります。
　IDや検索カラム指定は管理者のみ可能。一般ユーザーが指定しても無視されます。

	id, name, isadmin, info ほか全部。
	pass は返りません。

Ret:	undef	エラー
	$h	ユーザーデータ

================================================================================
●ユーザーリストの生成
================================================================================
$ha = $self->load_userlist($sort_col);

　管理者のみ実行可能。

Ret:
	ユーザー情報テーブル内の、pass以外の全カラムデータハッシュの配列

================================================================================
●ユーザーの追加、編集
================================================================================
$r = $self->user_add ($h, $ext);
$r = $self->user_edit($h, $ext);

　管理者のみ実行可能。編集時は ID を必ず指定すること。

	$h->{id}		ID
	$h->{pass}		パスワード
	$h->{pass2}		パスワード（確認用）。未定義ならばチェックしない
	$h->{name}		ユーザー名
	$h->{email}		メールアドレス
	$h->{isadmin}		管理者のとき 1 を定義

	$h->{disable}		ユーザーをログイン不可にする
	$h->{disable_pass}	1を設定するとパスワードを初期化（ログイン不可に）する
	$h->{crypted_pass}	crypt済のパスワード文字列

	$ext->{(col)}		追加更新するカラムとデータ。
				省略可。値チェックは一切行われない。
				id/name等の標準カラムが含まれた場合はエラーとなる。
				usrテーブルを独自拡張する場合に使用する。

	$h には汚染されたフォームのデータを直接渡して呼び出してよい。
	ID に使用出来る文字列は [A-Za-z0-9_] のみ。
	ユーザー名は必須。追加時はパスワードは必須。

	編集時はパスワードを省略した場合、パスワードは変更しない。

Ret:
	0		成功（Redirect推奨）
	1		エラー

================================================================================
●ユーザーの削除
================================================================================
$r = $self->user_delete(\@delete_ary);

　管理者のみ実行可能。

	@delete_ary	削除するユーザーIDの配列
			汚れたフォームデータをそのまま渡してよい。

Ret:
	0		成功（Redirect推奨）
	1		エラー

================================================================================
●ユーザー情報の変更（ユーザー本人）
================================================================================
$r = $self->change_user_info($h, $ext);

	$h->{now_pass}	現在のパスワード（パスワード変更時のみ必須）
	$h->{pass}	新しいパスワード
	$h->{pass2}	新しいパスワード（確認用／未定義ならばチェックしない）

	$h->{name}	名前の変更 （現在のパスワード確認は不要）
	$h->{email}	emailの変更（現在のパスワード確認は不要）
	$ext->{(col)}	追加更新カラム（user_add参照）。省略可。

	変更は、現在ログイン中のIDに対して行われている。
	$h には汚染されたデータをそのまま渡しても構わない。

Ret:
	0		成功（Redirect推奨）
	1		エラー

###############################################################################
■機能拡張 / 雑多機能
###############################################################################
================================================================================
●ユーザーIDの生成
===============================================================================
$id = $self->generate_uid($string);

　$string に渡された文字列を元に、ユニークな $id を生成する。

Ret:
	(uid)		ユーザーID
	undef		失敗

================================================================================
●パスワードの確認
===============================================================================
$r = $self->check_pass_by_id($id, $pass);

　$string に渡された文字列を元に、ユニークな $id を生成する。

Ret:
	undef/0		失敗
	1		成功（Authorize）

================================================================================
●sudo
===============================================================================
$r = $self->sudo('method', arg...);

　管理権限が必要な機能を呼び出す。


================================================================================
●カラム追加
===============================================================================
$r = $self->add_column(arg...);

	メインテーブルにカラムを追加します。
	DBモジュールの add_column を内部で呼び出しています。

