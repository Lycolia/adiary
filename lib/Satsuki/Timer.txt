package Satsuki::Timer;
================================================================================
高精度タイマー プラグイン説明書		Version 1.00	2005/06/22
================================================================================
					Copyright(C)2005 nabe / ABK project.
[TAB=8]

本プラグインを使用するためには、perl の標準ライブラリ Time::HiRes が必要です。
また本プラグインは主に開発者向けのものです。

動作イメージとしては、ストップウオッチだと思ってください。

※Time::HiRes がないときは、どの関数も常に undef を返します。

================================================================================
●タイマーのスタート
================================================================================
$self->start($name);

	$name	指定した名前のタイマーをスタートさせます。
		タイマーが stop 中の場合はカウントを再開させます。

================================================================================
●タイマーのチェック
================================================================================
$diff = $self->check($name);

	$name	タイマーの名前を指定します。

Ret:
	$diff	現在のタイマーの値です。単位はマイクロ秒になります。

================================================================================
●タイマーの停止
================================================================================
$diff = $self->stop($name);

	$name	タイマーの名前を指定します。
Ret:
	$diff	停止したタイマーの値です。単位はマイクロ秒になります。

================================================================================
●タイマーのクリア
================================================================================
$self->clear($name);

	$name	タイマーをクリア（初期化）します。
		同じ名前のタイマーを再利用する際は、初期化が必要です。

================================================================================
■使用例
================================================================================
	<$loadpm("hi_timer")>
	<$hi_timer.timer_start()>
		：
		：計測したい部分
		：
	<@hi_timer.timer_stop()>		←計測結果表示

　オブジェクト指向で扱いたい場合、名前指定は使用せずに、タイマー１つに付き
１つのオブジェクトを生成してください。

●複数のタイマーを並列に使用し、止める位置と表示位置が違う場合

	<$hi_timer.timer_start('tm1')>
	<$hi_timer.timer_start('tm2')>
		：
	<$tmstr3 = hi_timer.timer_start('tm3')>
	<$tmstr1 = hi_timer.timer_stop('tm2')>
		：
	<@tmstr1>
	<@hi_timer.timer_start(tm2)>
	<@tmstr3>

